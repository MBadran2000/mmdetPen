08/03 14:15:59 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.19 (main, May  6 2024, 19:43:03) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 8561973
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 12.3, V12.3.107
    GCC: gcc (GCC) 12.2.0
    PyTorch: 1.12.1+cu116
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1+cu116
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 8561973
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

08/03 14:16:00 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
custom_imports = dict(
    allow_failed_imports=False, imports=[
        'pipeline',
    ])
data_root = '/scratch/dr/y.nawar/pengwin/train/input/images/x-ray/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(interval=5, type='CheckpointHook'),
    logger=dict(interval=5, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
lr_config = dict(
    policy='step',
    step=[
        48,
        66,
    ],
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333)
metainfo = dict(
    classes=(
        'SA',
        'LI',
        'RI',
    ),
    palette=[
        (
            220,
            20,
            60,
        ),
        (
            60,
            220,
            20,
        ),
        (
            20,
            60,
            220,
        ),
    ])
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        convert_weights=True,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.2,
        drop_rate=0.0,
        embed_dims=192,
        init_cfg=dict(
            checkpoint=
            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_large_patch4_window12_384_22k.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            6,
            12,
            24,
            48,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=False,
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        pad_mask=True,
        pad_size_divisor=32,
        std=[
            1.0,
            1.0,
            1.0,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            192,
            384,
            768,
            1536,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=3,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        mask_head=dict(
            conv_out_channels=256,
            in_channels=256,
            loss_mask=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_mask=True),
            num_classes=3,
            num_convs=4,
            type='FCNMaskHead'),
        mask_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=14, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            mask_thr_binary=0.5,
            max_per_img=120,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=120,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=120)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            mask_size=28,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=120,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=120)),
    type='MaskRCNN')
optim_wrapper = dict(
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ), lr=1e-05, type='AdamW', weight_decay=0.05),
    type='OptimWrapper')
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file=
        '/scratch/dr/m.badran/pengwin/mmdetection_utils/Val_Config.json',
        backend_args=None,
        data_prefix=dict(img=''),
        data_root='/scratch/dr/y.nawar/pengwin/train/input/images/x-ray/',
        metainfo=dict(
            classes=(
                'SA',
                'LI',
                'RI',
            ),
            palette=[
                (
                    220,
                    20,
                    60,
                ),
                (
                    60,
                    220,
                    20,
                ),
                (
                    20,
                    60,
                    220,
                ),
            ]),
        pipeline=[
            dict(imdecode_backend='pillow', type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                384,
                384,
            ), type='Resize'),
            dict(
                poly2mask=True,
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True),
            dict(epsilon=0.001, type='CustomNegLogTransform'),
            dict(
                convert=True,
                lower=0.01,
                type='CustomWindowTransform',
                upper=0.95),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='/scratch/dr/m.badran/pengwin/mmdetection_utils/Val_Config.json',
    backend_args=None,
    format_only=False,
    metric=[
        'bbox',
    ],
    type='CocoMetric')
test_pipeline = [
    dict(imdecode_backend='pillow', type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        384,
        384,
    ), type='Resize'),
    dict(
        poly2mask=True, type='LoadAnnotations', with_bbox=True,
        with_mask=True),
    dict(epsilon=0.001, type='CustomNegLogTransform'),
    dict(convert=True, lower=0.01, type='CustomWindowTransform', upper=0.95),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=60000, type='EpochBasedTrainLoop', val_interval=5)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=16,
    dataset=dict(
        ann_file='/scratch/dr/m.badran/pengwin/Nawar/test.json',
        backend_args=None,
        data_prefix=dict(img=''),
        data_root='/scratch/dr/y.nawar/pengwin/train/input/images/x-ray/',
        filter_cfg=dict(filter_empty_gt=False, min_size=32),
        metainfo=dict(
            classes=(
                'SA',
                'LI',
                'RI',
            ),
            palette=[
                (
                    220,
                    20,
                    60,
                ),
                (
                    60,
                    220,
                    20,
                ),
                (
                    20,
                    60,
                    220,
                ),
            ]),
        pipeline=[
            dict(imdecode_backend='pillow', type='LoadImageFromFile'),
            dict(
                poly2mask=True,
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True),
            dict(
                keep_ratio=True,
                scales=[
                    (
                        384,
                        384,
                    ),
                ],
                type='RandomChoiceResize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(epsilon=0.001, type='CustomNegLogTransform'),
            dict(
                convert=True,
                lower=0.01,
                type='CustomWindowTransform',
                upper=0.99),
            dict(
                bbox_params=dict(
                    format='pascal_voc',
                    label_fields=[
                        'gt_bboxes_labels',
                    ],
                    type='BboxParams'),
                keymap=dict(gt_bboxes='bboxes', gt_masks='masks', img='image'),
                transforms=[
                    dict(clip_limit=(
                        1,
                        4,
                    ), p=0.5, type='CLAHE'),
                    dict(p=0.5, type='InvertImg'),
                ],
                type='Albu'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=16,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(imdecode_backend='pillow', type='LoadImageFromFile'),
    dict(
        poly2mask=True, type='LoadAnnotations', with_bbox=True,
        with_mask=True),
    dict(keep_ratio=True, scales=[
        (
            384,
            384,
        ),
    ], type='RandomChoiceResize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(epsilon=0.001, type='CustomNegLogTransform'),
    dict(convert=True, lower=0.01, type='CustomWindowTransform', upper=0.99),
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', gt_masks='masks', img='image'),
        transforms=[
            dict(clip_limit=(
                1,
                4,
            ), p=0.5, type='CLAHE'),
            dict(p=0.5, type='InvertImg'),
        ],
        type='Albu'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file='/scratch/dr/m.badran/pengwin/Nawar/test.json',
        backend_args=None,
        data_prefix=dict(img=''),
        data_root='/scratch/dr/y.nawar/pengwin/train/input/images/x-ray/',
        metainfo=dict(
            classes=(
                'SA',
                'LI',
                'RI',
            ),
            palette=[
                (
                    220,
                    20,
                    60,
                ),
                (
                    60,
                    220,
                    20,
                ),
                (
                    20,
                    60,
                    220,
                ),
            ]),
        pipeline=[
            dict(imdecode_backend='pillow', type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                384,
                384,
            ), type='Resize'),
            dict(
                poly2mask=True,
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True),
            dict(epsilon=0.001, type='CustomNegLogTransform'),
            dict(
                convert=True,
                lower=0.01,
                type='CustomWindowTransform',
                upper=0.95),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=16,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='/scratch/dr/m.badran/pengwin/mmdetection_utils/Val_Config.json',
    backend_args=None,
    format_only=False,
    metric=[
        'bbox',
    ],
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '/scratch/dr/m.badran/pengwin/Nawar/Exps/temp/'

08/03 14:16:04 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
08/03 14:16:04 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
loading annotations into memory...
Done (t=0.04s)
creating index...
index created!
loading annotations into memory...
Done (t=0.04s)
creating index...
index created!
loading annotations into memory...
Done (t=10.40s)
creating index...
index created!
08/03 14:16:17 - mmengine - INFO - Loads checkpoint by http backend from path: https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_large_patch4_window12_384_22k.pth
08/03 14:16:17 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
08/03 14:16:17 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
08/03 14:16:17 - mmengine - INFO - Checkpoints will be saved to /scratch/dr/m.badran/pengwin/Nawar/Exps/temp.
08/03 14:16:25 - mmengine - INFO - Exp name: config_mask_rcnn_20240803_141557
08/03 14:16:25 - mmengine - INFO - Epoch(train)     [1][4/4]  lr: 1.0000e-05  eta: 5 days, 5:35:00  time: 1.8838  data_time: 0.4842  memory: 22950  loss: 7.6612  loss_rpn_cls: 0.6349  loss_rpn_bbox: 0.0697  loss_cls: 1.3032  acc: 94.4882  loss_bbox: 0.0542  loss_mask: 5.5992
08/03 14:16:30 - mmengine - INFO - Exp name: config_mask_rcnn_20240803_141557
08/03 14:16:30 - mmengine - INFO - Epoch(train)     [2][4/4]  lr: 1.0000e-05  eta: 4 days, 5:45:21  time: 1.5264  data_time: 0.2984  memory: 22950  loss: 6.3061  loss_rpn_cls: 0.6212  loss_rpn_bbox: 0.0702  loss_cls: 0.8836  acc: 87.3518  loss_bbox: 0.0775  loss_mask: 4.6535
08/03 14:16:34 - mmengine - INFO - Exp name: config_mask_rcnn_20240803_141557
08/03 14:16:34 - mmengine - INFO - Epoch(train)     [3][4/4]  lr: 1.0000e-05  eta: 3 days, 21:39:43  time: 1.4050  data_time: 0.2370  memory: 22994  loss: 5.5449  loss_rpn_cls: 0.6074  loss_rpn_bbox: 0.0696  loss_cls: 0.7653  acc: 86.6142  loss_bbox: 0.1428  loss_mask: 3.9599
08/03 14:16:39 - mmengine - INFO - Exp name: config_mask_rcnn_20240803_141557
08/03 14:16:39 - mmengine - INFO - Epoch(train)     [4][4/4]  lr: 1.0000e-05  eta: 3 days, 18:04:23  time: 1.3512  data_time: 0.2055  memory: 23121  loss: 5.0550  loss_rpn_cls: 0.5946  loss_rpn_bbox: 0.0688  loss_cls: 0.7233  acc: 85.0394  loss_bbox: 0.2007  loss_mask: 3.4677
08/03 14:16:44 - mmengine - INFO - Exp name: config_mask_rcnn_20240803_141557
08/03 14:16:44 - mmengine - INFO - Epoch(train)     [5][4/4]  lr: 1.0000e-05  eta: 3 days, 16:04:19  time: 1.3212  data_time: 0.1871  memory: 23310  loss: 4.7077  loss_rpn_cls: 0.5828  loss_rpn_bbox: 0.0691  loss_cls: 0.7059  acc: 83.0709  loss_bbox: 0.2574  loss_mask: 3.0926
08/03 14:16:44 - mmengine - INFO - Saving checkpoint at 5 epochs
08/03 14:16:46 - mmengine - WARNING - `save_param_scheduler` is True but `self.param_schedulers` is None, so skip saving parameter schedulers
08/03 14:16:55 - mmengine - INFO - Evaluating bbox...
Loading and preparing results...
DONE (t=0.00s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.78s).
Accumulating evaluation results...
DONE (t=0.86s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.002
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.004
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.001
08/03 14:17:00 - mmengine - INFO - bbox_mAP_copypaste: 0.001 0.002 0.001 0.000 0.004 0.001
08/03 14:17:00 - mmengine - INFO - Epoch(val) [5][4/4]    coco/bbox_mAP: 0.0010  coco/bbox_mAP_50: 0.0020  coco/bbox_mAP_75: 0.0010  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.0040  coco/bbox_mAP_l: 0.0010  data_time: 0.8529  time: 1.3605
08/03 14:17:05 - mmengine - INFO - Exp name: config_mask_rcnn_20240803_141557
08/03 14:17:05 - mmengine - INFO - Epoch(train)     [6][4/4]  lr: 1.0000e-05  eta: 3 days, 14:41:44  time: 1.3006  data_time: 0.1764  memory: 23421  loss: 4.4546  loss_rpn_cls: 0.5694  loss_rpn_bbox: 0.0675  loss_cls: 0.7134  acc: 79.4466  loss_bbox: 0.3093  loss_mask: 2.7949
08/03 14:17:10 - mmengine - INFO - Exp name: config_mask_rcnn_20240803_141557
08/03 14:17:10 - mmengine - INFO - Epoch(train)     [7][4/4]  lr: 1.0000e-05  eta: 3 days, 13:37:18  time: 1.2845  data_time: 0.1680  memory: 23637  loss: 4.2497  loss_rpn_cls: 0.5569  loss_rpn_bbox: 0.0675  loss_cls: 0.7150  acc: 83.7945  loss_bbox: 0.3446  loss_mask: 2.5657
08/03 14:17:15 - mmengine - INFO - Exp name: config_mask_rcnn_20240803_141557
08/03 14:17:15 - mmengine - INFO - Epoch(train)     [8][4/4]  lr: 1.0000e-05  eta: 3 days, 12:51:02  time: 1.2729  data_time: 0.1618  memory: 23451  loss: 4.0807  loss_rpn_cls: 0.5442  loss_rpn_bbox: 0.0666  loss_cls: 0.7140  acc: 81.8898  loss_bbox: 0.3712  loss_mask: 2.3847
08/03 14:17:20 - mmengine - INFO - Exp name: config_mask_rcnn_20240803_141557
08/03 14:17:20 - mmengine - INFO - Epoch(train)     [9][4/4]  lr: 1.0000e-05  eta: 3 days, 12:18:34  time: 1.2648  data_time: 0.1568  memory: 23575  loss: 3.9382  loss_rpn_cls: 0.5315  loss_rpn_bbox: 0.0659  loss_cls: 0.7129  acc: 84.6457  loss_bbox: 0.3925  loss_mask: 2.2353
08/03 14:17:24 - mmengine - INFO - Exp name: config_mask_rcnn_20240803_141557
08/03 14:17:24 - mmengine - INFO - Epoch(train)    [10][4/4]  lr: 1.0000e-05  eta: 3 days, 11:53:27  time: 1.2586  data_time: 0.1528  memory: 23569  loss: 3.8183  loss_rpn_cls: 0.5198  loss_rpn_bbox: 0.0656  loss_cls: 0.7106  acc: 85.3175  loss_bbox: 0.4098  loss_mask: 2.1125
08/03 14:17:24 - mmengine - INFO - Saving checkpoint at 10 epochs
08/03 14:17:36 - mmengine - INFO - Evaluating bbox...
Loading and preparing results...
DONE (t=0.00s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=5.49s).
Accumulating evaluation results...
DONE (t=0.90s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.004
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.003
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.001
08/03 14:17:42 - mmengine - INFO - bbox_mAP_copypaste: 0.001 0.004 0.000 0.000 0.003 0.001
08/03 14:17:42 - mmengine - INFO - Epoch(val) [10][4/4]    coco/bbox_mAP: 0.0010  coco/bbox_mAP_50: 0.0040  coco/bbox_mAP_75: 0.0000  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.0030  coco/bbox_mAP_l: 0.0010  data_time: 0.2327  time: 0.7123
